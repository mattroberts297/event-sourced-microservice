play {
  crypto.secret="1FADDAC1-C48D-46DB-AD4D-45D15F95DA11-CEBB5C10-1AC5-4354-9C1B-083349E13A77"
  http.errorHandler = "com.example.handlers.RestErrorHandler"
  modules {
    enabled += "com.example.journals.JournalsModule"
    enabled += "com.example.repos.ReposModule"
  }
}

env {
  db {
    host = "127.0.0.1"
    host = ${?DOCKER_MACHINE_IP}
  }
}

slick.events.db {
  url = "jdbc:postgresql://"${env.db.host}"/event-sourcing"
  user = "event-sourcing-app"
  password = "event-sourcing-password"
}

akka {
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = DEBUG

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      receive = on
      autoreceive = on
      lifecycle = off
      fsm = off
      event-stream = off
      unhandled = on
      router-misconfiguration = off
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
    }
  }

  cluster {
    seed-nodes = [ "akka.tcp://test@127.0.0.1:2552" ]
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
    }
  }
}

jdbc-journal {
  class = "akka.persistence.jdbc.journal.JdbcAsyncWriteJournal"
  slick = ${slick}
}

jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.JdbcSnapshotStore"
  slick = ${slick}
}

slick {
  driver = "slick.driver.H2Driver$"
  db {
    url = "jdbc:h2:mem:test-database;DATABASE_TO_UPPER=false;"
    user = "root"
    password = "root"
    driver = "org.h2.Driver"
    connectionTestQuery = "SELECT 1"
  }
}